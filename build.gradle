plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java-test-fixtures'
    id 'com.google.cloud.tools.jib' version '3.4.3'
}

group = 'com.kbe5'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Swagger OpenAPI 3
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.4.3'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // https://mvnrepository.com/artifact/org.springframework/spring-jdbc
    implementation 'org.springframework:spring-jdbc:6.2.7'

    testImplementation 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.assertj:assertj-core:3.24.2'

    // Spring actuuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // OTEL, OTLP
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation "io.opentelemetry:opentelemetry-exporter-otlp"
}

jib {
    from {
        image = 'eclipse-temurin:17-jre'
        // Apple Silicon에서 amd64 이미지를 강제해야 하면 아래 주석을 해제하세요.
        platforms {
            platform {
                os = 'linux'
                architecture = 'arm64'
            }
        }
    }
    to {
        image = 'rento-app:0.0.1'   // docker-compose.yml의 app.image와 동일
    }
    container {
        ports = ['8080']
        jvmFlags = ['-XX:MaxRAMPercentage=75.0', '-Duser.timezone=Asia/Seoul']
        creationTime = 'USE_CURRENT_TIMESTAMP'
        // Spring Boot면 mainClass 자동 인식. 일반 자바면 다음 줄로 지정:
        // mainClass = 'com.rento.rento.RentoApplication'
    }

    dockerClient { executable = '/usr/local/bin/docker' } // 실제 출력값으로 교체
}

tasks.named('test') {
    useJUnitPlatform()
}
